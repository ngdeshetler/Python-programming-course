%Problem set 2
%Natalie De Shetler

%This is the script I wrote in Matlab to find all the possible combinations
%of the chicken nugget pack sizes (6,9,20) that could get you a total of
%50, 51, 52, 53, 54, and 55 chicken nuggets.
%
%I choose to use matlab because I wanted to generate a multidimensional
%matrix of all the possible combinations of the three pack sizes, and
%matlab is the program to use for matrixes, but I think you can do this is
%python, with lists of lists of lists, but that gets messy real fast.
%
%The idea behind this script is that each dimension of the matrix (a,b,c)
%represents one of the pack sizes, so that indexing the matrix would
%generate the solution to 6a + 9b + 20c = n. The only note to that is that
%its actually 6(a-1) + 9(b-1) + 20(c-1) = n because matlab starts its
%indexing at 1, and we want 0 packs as an option.

for r=1:2%this is so that i can run all parts of the homework at once, its not important for the task
    
    test_packages={[6,9,20],[5,10,15],[8,12,25],[4,9,24]};
    if r==1
        test_multiple=false;%this is so I can run the script either for the first parts only
    else
        test_multiple=true;
    end
    
    for t=1:length(test_packages)%testing different package sizes
        
        if test_multiple
            packages=test_packages{t};
            totals=200;%this is what they said to go up to
        else
            packages=[6,9,20];%This is the three sizes of the packs
            totals=[50,51,52,53,54,55];%here are all the numbers of chicken nuggets to try to find combinations for
        end
        
        n_by=floor(max(totals)./packages)+1;%this creates the dimentions of the matrix to hold the combinations
        %its size is given by the maxium number of each pack size that could go
        %into the largest total size we are looking for, plus 1 for zero
        
        chicken_nuggets=zeros(n_by);%create empty matriz
        
        %This fills the matrix bases on the indexs
        for n=1:n_by(1)
            for k=1:n_by(2)
                for f=1:n_by(3)
                    chicken_nuggets(n,k,f)=(n-1)*packages(1)+(k-1)*packages(2)+(f-1)*packages(3);
                end
            end
        end
        
        if ~test_multiple
            part1_holder=cell(length(totals),1);
            for n=1:length(totals)
                [A,Bhold]=find(chicken_nuggets==totals(n));%This looks for, and returns reference indexs, for the number we are looking for
                [B,C]=ind2sub([n_by,n_by,n_by],Bhold);%this here is probably the most confusing part of the script,
                %it has to do with how matlab indexes matrixes that go beyond 2 dimentions.
                %Basically, matlab has a complicated way of doing it, and this function is
                %needed to convert into a form we can use.
                
                %Finally, this prints out the results!
                part1_holder{n}=sprintf('\nTo get %d chicken nuggets you need %d %d-packs, %d %d-packs, and %d %d-packs.',totals(n), ...
                    A(1)-1,packages(1),B(1)-1,packages(2),C(1)-1,packages(3)); %need to -1 here cause 1 is the zero place
                if length(A)>1%this looks to see if there are alternate combinations
                    extra_holder=cell(length(A)-1,1);
                    for m=2:length(A)
                        extra_holder{m-1}=sprintf('\tor %d %d-packs, %d %d-packs, and %d %d-packs.', A(m)-1,packages(1),B(m)-1,packages(2),C(m)-1,packages(3));
                    end
                    part1_holder{n}=char(part1_holder{n},char(extra_holder{:}));
                end
            end
            fprintf('\n============================\nThe answer for problem 1, part1:\n')
            disp(char(part1_holder{:}))
        end
        
        %this is for problem 3, it looks at each number till it find 6 (or
        %the min from package) in a row, then ends
        n=1;
        counter=0;
        be_made=true;
        while counter<min(packages)
            if ismember(n,chicken_nuggets)%checks to see it n can be generated by the three package sizes, aka is it in the matrix i made
                counter=counter+1;
            else
                counter=0;
            end
            n=n+1;
            if n>max(totals)
                be_made=false;
                break
            end
        end
        cant_make=n-min(packages)-1;
        
        %fancy printing out of answers
        if ~test_multiple
            fprintf('\n============================\nThe answer for problem 3:\n')
            fprintf('\nLargest number of McNuggets that cannot be bought in exact quantity: %d\n', cant_make);
            fprintf('\n============================\nThe answer for problem 4:\n')
            break
        elseif be_made
            fprintf('\nGiven package sizes %d, %d, and %d, the largest number of McNuggets that cannot be bought in exact quantity is: %d\n',...
                packages(1),packages(2),packages(3),cant_make);
        else
            fprintf('\nGiven package sizes %d, %d, and %d, the largest number of McNuggets that cannot be bought in exact quantity is: \nGreater than %d, or not all number can be bought in exact quantities\n',...
                packages(1),packages(2),packages(3),max(totals));
        end
    end
end

